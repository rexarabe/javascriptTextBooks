"We think we are creating the system for our own purposes. We believe we are making it in our own image... But the computer is not really like us. It is a projection of a very slim par of ourselves:
That portion devoted to logic, order, rule, and clarity"
-Ellen Ullman, Close to the Machine: Techonopholia and its Discontents.

Introduction

This is a book about instructing computers.
Computers are about as common as screwdrivers today, but they are quite a bit moree complex, and making them do what you want them to do isn't always easy.
If the teask you have for your computer is a common, well-understood one, such as showing you your email or acting like a calculator, you can open the appropriate application and get to work.
But for unique or open-ended tasks, there probably is no application.
That is where programming may come in. Programming is the act of constructing a program - a set of precise instructions telling a computer what to do.
Because computers are dumb, pedantic beasts, programming is fundamentally tedious and frustrating.
Fortunately, if you can get over that fact, and maybe even enjoy the rigor of thinking in terms that dumb machines can deal with, programming can be rewarding.
It allows you to do thinkgs in seconds that would take forever by hand.
It is a way to make your computer tool do thinngs that it couldn't do before.
And it provides a wonderful exercise in abstract thinking.
 Most programming is done with programming languages. A programming language is an artificially constructed language used to instruct computers.
 It is interesting that the most effective way we've found to communicate with a computer borrows so heavily from the way we communicate with each other.
 Like human languages, computer languages allow words and phrases to be combined in new ways, making it possible to express ever new concepts.
  At one point language-based interfaces, such as the BASIC and DOS prompts of the 1980's and 1990s, were the main method of interacting with computers.
  They have largely been replaced with visual interfaces, which are easier to learn but offer less freedom.
  Computer languages are still there, if you know where to look.
  One such language, JavaScript, is built into every modern web browser and is thus available on almost every device.
  This book will try to make you familiar enough with this language to do useful and amusing things with it.

  On programming
Besides explaining JavaScript, I will introduce the basic principles of programming.
Programming, it turns out, is hard.
The fundamental rules are simple and clear, but programs built on top of these rules tend to become complex enough to introduce their own rules and complexity.
You're building your own maze, in a way, and yuo might just get lot in it.

There will be times when reading this book feels terribly frustrating.
If you are new to programming,there will be a lot of new material to digest.
Much of this material will then be combined in ways that require you to make additional connections.

It is up to you to make the necessary effort.
When you are struggling to follow the book, do not jump to any conclusions about your own capabilities.
You are fine - you just need to keep at it.
Take a break, reread some material, and make sure you read and understand the example programs and exercices.
Learning is hard work, but everything you learn is yours and will make subsequent learning easier.


When action grows unprofitable, gather information; when information grows unprofitable, sleep.
-- Ursula K. Le Guin, The Left Hand of Darkness

A program is many things.
It is a piece of text typed by a programmer, it is the directing force that makes the computer do what it does, it is data in the computer's memory, yet it controls the actions performed on this same memory.
Analgoies thatt try to compare programs to objects we are familiar with tend to fall short.
A superficially fitting one is that of a machine - lots of separate parts tend to be involved, and to make the whole thing tick , we have to consider the ways in which these parts interconnect and contribute to the operation of the whole.
A computer is a physiccal machine that acts as a host for these immaterial machines.
Computers themselves can do only stupidly straightforward things.
The reason they are so useful is that they do these things at an incredibly high speed. A program can ingeniously combine an enormous number of these simple actions to do very complicated things.
A program is a building of thought.
It is costless to build, it is weightless, and it grows easily under our typing hands.
But without care, a program's size and complexity will grow out of control, confusing even the person who created it.
Keeping programs under control is the main problem of programming.
When a program works, it is beautiful.
The art of programming is the skill of controlling complexity.
The great program is subdued - made simple in its complexity.
 Some programmers believe that this complexity is best managed by using only a small set of well-understood techniques in their programs.
 They have composed strict rules ("best practices") prescribing the form programs should have and carefully stay within their safe little zone.
 This is not only boring, it is ineffective.
 New problems often require new solutions.
 The field of programming is young and still developing rapidly, and it is varied enough to have room for wildly different approaches.
 There are many terrible mistakes to make in oprogram design, and you should go ahead and make them so that you understand them.
 A sense of what a good program looks like is developed in practice, not learned from a list of rules.

 Why Language matters

in the beginning, at the birth of computing, there wer no programming languages. Programs looked something like this:

00110001 00000000 00000000
00110001 00000001 00000001
00110001 00000001 00000010
..........
0110010 000000000 00000000

That is a program to add the numbers from 1 to 10 together and print out the result: 1 + 2 + .. + 10 = 55.
It could run on a simple, hypothetical machine.
To program early computers, it was necessary to set large arrays of switches in the right position or punch holes in strips of carboard and deed them to the computer.
You can probably imagine how tedious and error-prone this procedure was.
Even writing simple programs required much clev erness and discipline.
Complex ones wer nearly inconceivable.
Of course, manually entering these arcane patterns of bits (the ones and zeros) did give the programmer a profound sense of being a mighty wizard.
And that has to be worth something in terms of job satisfaction.
Each line of the previous program contains a single instruction. I could be written in English like this:



